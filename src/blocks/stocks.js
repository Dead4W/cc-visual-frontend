/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Define custom blocks.
 * @author abbychau@gmail.com (Abby Chau)
 */

// More on defining blocks:
// https://developers.google.com/blockly/guides/create-custom-blocks/define-blocks

import * as Blockly from "blockly/core";
import { luaGenerator, Order } from "blockly/lua";

const sections = [
  {
    name: "sides",
    help_url: null,
    list_docs: [
      {
        name: "left",
        type: "const",
        description: "Только периферийная сторона",
      },
      {
        name: "right",
        type: "const",
        description: "Только периферийная сторона",
      },
      {
        name: "back",
        type: "const",
        description: "Только периферийная сторона",
      },
      {
        name: "front",
        type: "const",
        description: "Только периферийная сторона",
      },
      {
        name: "top",
        type: "const",
        description: "Только периферийная сторона",
      },
      {
        name: "bottom",
        type: "const",
        description: "Просто периферийная сторона",
      },
    ],
  },
  {
    name: "_G",
    help_url: "https://tweaked.cc/module/_G.html#v:",
    list_docs: [
      {
        name: "sleep",
        args: [{ arg_name: "time", required: true }],
        type: "function",
        description:
          'Приостанавливает выполнение на указанное количество секунд.  \nПоскольку функция ожидает определённое количество тиков мира, время автоматически округляется до ближайшего кратного 0,05 секунды. Если вы используете корутины или параллельный API, это приостановит выполнение только текущего потока, а не всей программы.  \nСовет Поскольку функция sleep внутренне использует таймеры, она является функцией, которая вызывает переключение контекста. Это значит, что вы можете использовать её для предотвращения ошибок "Слишком долгое выполнение без переключения контекста". Однако, поскольку минимальное время сна составляет 0,05 секунды, это замедлит вашу программу.  \n⚠️ Предупреждение Внутренне эта функция ставит в очередь и ожидает событие таймера (используя os.startTimer), однако она не прослушивает другие события. Это значит, что любое событие, происходящее во время сна, будет полностью проигнорировано. Если вам нужно получать события во время сна, рассмотрите возможность использования таймеров или параллельного API.  \nПараметры  \nвремя number Количество секунд сна, округленное до ближайшего кратного 0,05.  \nИспользование  \nСон в течение трех секунд.  \nprint("Спим три секунды")  \nsleep(3)  \nprint("Готово!")  \nСмотрите также  \nos.startTimer',
      },
      {
        name: "write",
        args: [{ arg_name: "text", required: true }],
        type: "function",
        description:
          'Записывает строку текста на экран без переноса строки на конце, перенося\nтекст при необходимости.\nПараметры\ntext string Текст для записи\nВозвращает\nnumber Количество написанных строк\nИспользование\nwrite("Hello, world")\nСмотрите также\nprint Обёртка вокруг write, которая добавляет новую строку и принимает несколько аргументов',
      },
      {
        name: "print",
        args: [{ arg_name: "...args", required: false }],
        type: "function",
        description:
          'Выводит указанные значения на экран, разделяя их пробелами и перенося строки\nпо мере необходимости. После вывода курсор перемещается на следующую строку.\nПараметры\n...  Значения для вывода на экран\nВозвращаемое значение\nnumber Количество написанных строк\nПример использования\nprint("Привет, мир!")',
      },
      {
        name: "printError",
        args: [{ arg_name: "...args", required: false }],
        type: "function",
        description:
          'Выводит указанные значения на экран красным цветом, разделяя их пробелами,\nесли необходимо, переносит строку. После вывода курсор перемещается на следующую строку.\nПараметры\n... Значения для вывода на экран\nИспользование\nprintError("Что-то пошло не так!")',
      },
      {
        name: "read",
        args: [
          { arg_name: "replaceChar", required: false },
          { arg_name: "history", required: false },
          { arg_name: "completeFn", required: false },
          { arg_name: "default", required: false },
        ],
        type: "function",
        description:
          'Читает пользовательский ввод с терминала. Автоматически обрабатывает стрелки,\nвставку, замену символов, прокрутку истории, автодополнение и\nзначения по умолчанию.\nПараметры\nreplaceChar? string Символ для замены каждого введенного символа.\nМожно использовать для скрытия паролей, например.history? table Таблица с элементами истории, по которым можно прокручивать\nвверх и вниз с помощью стрелок. Старейший элемент находится по индексу 1, а\nсамый новый - по самому высокому индексу.completeFn? function(partial: string):{ string... } | nil Функция\nдля автодополнения. Эта функция должна принимать введенный до сих пор текст и возвращать список возможных вариантов для дополнения.default? string Текст по умолчанию, который должен быть уже введен в\nприглашение.\nВозвращаемое значение\nstring Введенный текст.\nИспользование\nПрочитать строку и вернуть ее пользователю\nwrite("> ")\nlocal msg = read()\nprint(msg)Запрос пароля у пользователя.\nwhile true do\n  write("Password> ")\n  local pwd = read("*")\n  if pwd == "let me in" then break end\n  print("Неверный пароль, попробуйте снова.")\nend\nprint("Вход выполнен!")Полный пример с автодополнением, историей и значением по умолчанию.\nlocal completion = require "cc.completion"\nlocal history = { "картофель", "апельсин", "яблоко" }\nlocal choices = { "яблоко", "апельсин", "банан", "клубника" }\nwrite("> ")\nlocal msg = read(nil, history, function(text) return completion.choice(text, choices) end, "app")\nprint(msg)\nСмотрите также\ncc.completion Для функций помощи с автодополнением.',
      },
      {
        name: "_HOST",
        type: "const",
        description:
          "Хранит текущие версии ComputerCraft и Minecraft.\nВне Minecraft (например, в эмуляторе) _HOST будет содержать версию эмулятора.\nНапример, ComputerCraft 1.93.0 (Minecraft 1.15.2).\nИспользование\nВыводит информацию о среде текущего компьютера.\nprint(_HOST)",
      },
      {
        name: "_CC_DEFAULT_SETTINGS",
        type: "const",
        description:
          "Стандартные настройки компьютера, определенные в конфигурации ComputerCraft.\nЭто список настроек, разделенных запятыми, определенных конфигурацией мода или владельцем сервера. По умолчанию он пуст.\nПример значения для отключения автозаполнения:\nshell.autocomplete=false,lua.autocomplete=false,edit.autocomplete=false\nИспользование\n_CC_DEFAULT_SETTINGS",
      },
    ],
  },
  {
    name: "turtle",
    help_url: "https://tweaked.cc/module/turtle.html#v:",
    list_docs: [
      {
        name: "craft",
        args: [{ arg_name: "limit", required: false }],
        type: "function",
        description:
          'Создайте рецепт, основываясь на инвентаре черепахи.\nИнвентарь черепахи должен быть расставлен, как сетка для крафта. Например, чтобы\nсделать палки, слоты 1 и 5 должны содержать доски. Все остальные слоты должны быть\nпустыми, включая те, что находятся за пределами "сетки" для крафта.\nПараметры\nlimit? число = 64 Максимальное количество шагов крафта, которое можно выполнить.\nВозвращает\ntrue Если крафт успешен.\nИли\nfalse Если крафт не удался. строка Описывающая, почему крафт не удался.\nВызывает исключение\nКогда limit меньше 1 или больше 64.',
      },
      {
        name: "forward",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Переместить черепаху вперед на один блок.  \nВозвращает  \nboolean Указывает, смогла ли черепаха успешно переместиться.  \nstring | nil Причина, по которой черепаха не смогла переместиться.",
      },
      {
        name: "back",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Переместите черепаху на один блок назад.\nВозвращает\nboolean Могла ли черепаха успешно переместиться.string | nil Причина, по которой черепаха не смогла переместиться.",
      },
      {
        name: "up",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Переместите черепаху на один блок вверх.\nВозврат\nboolean Удалось ли черепахе успешно переместиться. string | nil Причина, по которой черепаха не смогла переместиться.",
      },
      {
        name: "down",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Переместить черепаху на один блок вниз.\nВозвращает\nboolean Указывает, смогла ли черепаха успешно переместиться.string | nil Причина, по которой черепаха не смогла переместиться.",
      },
      {
        name: "turnLeft",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Поверните черепаху на 90 градусов влево.  \nВозвращает  \nboolean Указывает, смогла ли черепаха успешно повернуться.  \nstring | nil Причина, по которой черепаха не смогла повернуться.",
      },
      {
        name: "turnRight",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Поверните черепаху на 90 градусов вправо.\nВозвращает\nboolean Могла ли черепаха успешно повернуться.string | nil Причина, по которой черепаха не смогла повернуться.",
      },
      {
        name: "dig",
        args: [{ arg_name: "side", required: false }],
        type: "function",
        description:
          'Попытка сломать блок перед черепахой.\nДля этого требуется инструмент черепахи, способный сломать блок. Алмазные кирки\n(горные черепахи) могут сломать любой ванильный блок, но другие инструменты (такие как топоры)\nимеют более ограниченные возможности.\nПараметры\nside? string Конкретный инструмент для использования. Должен быть "left" или "right".\nВозвращает\nboolean Был ли блок сломан. string | nil Причина, по которой блок не был сломан.',
      },
      {
        name: "digUp",
        args: [{ arg_name: "side", required: false }],
        type: "function",
        description:
          'Попытка разрушить блок над черепахой. Смотрите полные детали в разделе "dig".\nПараметры\nside? string Конкретный инструмент для использования.\nВозвращает\nboolean Был ли блок разрушен.string | nil Причина, по которой блок не был разрушен.',
      },
      {
        name: "digDown",
        args: [{ arg_name: "side", required: false }],
        type: "function",
        description:
          "Попытка разрушить блок под черепахой. Смотрите раздел dig для получения полной информации.\nПараметры\nside? string Конкретный инструмент для использования.\nВозвраты\nboolean Был ли блок разрушен.string | nil Причина, по которой блок не был разрушен.",
      },
      {
        name: "place",
        args: [{ arg_name: "text", required: false }],
        type: "function",
        description:
          'Разместите блок или предмет в мире перед черепахой.\n"Размещение" предмета позволяет ему взаимодействовать с блоками и объектами перед черепахой. Например, ведра\nмогут набирать и выливать жидкости, а пшеница может использоваться для размножения коров. Однако вы не можете использовать \nприказ "разместить", чтобы выполнять произвольные взаимодействия с блоками, такие как нажатие кнопок или переключение рычагов.\nПараметры\ntext? строка При размещении знака установить его содержание в этот текст.\nВозвращает\nboolean Возможность того, что блок был размещен.string | nil Причина, по которой блок не был размещен.',
      },
      {
        name: "placeUp",
        args: [{ arg_name: "text", required: false }],
        type: "function",
        description:
          "Разместите блок или предмет в мир над черепахой.\nПараметры\ntext? string При размещении таблички установите её содержимое в этот текст.\nВозвращает\nboolean Может ли блок быть размещён. string | nil Причина, по которой блок не был размещён.\nСмотрите также\nplace Для получения дополнительной информации о размещении предметов.",
      },
      {
        name: "placeDown",
        args: [{ arg_name: "text", required: false }],
        type: "function",
        description:
          "Поместите блок или предмет в мир под черепахой.\nПараметры\ntext? string При установке знака установите его содержимое на этот текст.\nВозвращает\nboolean Был ли блок размещён. string | nil Причина, по которой блок не был размещен.\nСмотрите также\nplace Для получения дополнительной информации о размещении предметов.",
      },
      {
        name: "drop",
        args: [{ arg_name: "count", required: false }],
        type: "function",
        description:
          "Выложите выбранный стек в инвентарь перед черепахой или в мир как предмет, если инвентаря нет. \n\nПараметры:\ncount? число Количество предметов для выброса. Если не указано, будет выброшен весь стек.\n\nВозвращает:\nboolean Были ли выброшены предметы. string | nil Причина, по которой предметы не были выброшены.\n\nВыбрасывает исключение:\nЕсли производится выброс недопустимого числа предметов.\n\nСмотрите также:\nselect",
      },
      {
        name: "dropUp",
        args: [{ arg_name: "count", required: false }],
        type: "function",
        description:
          "Выбросить текущую выбранную стопку в инвентарь над черепахой или в мир в виде предмета, если инвентаря нет.\n\nПараметры:\ncount? number Количество предметов для сброса. Если не указано, будет сброшена вся стопка.\n\nВозвращаемые значения:\nboolean Были ли предметы выброшены. string | nil Причина, по которой предметы не были выброшены.\n\nИсключения:\nЕсли выброшено недопустимое количество предметов.\n\nСмотрите также:\nselect",
      },
      {
        name: "dropDown",
        args: [{ arg_name: "count", required: false }],
        type: "function",
        description:
          "Высвободите выбранную стопку в инвентарь под черепахой или как предмет в мир, если \nниже нет инвентаря.\nПараметры\ncount? число Количество предметов для выброса. Если не указано, будет выброшена вся стопка.\nВозвращает\nбулево Были ли выброшены предметы. строка | ничего Причина, по которой предметы не были выброшены.\nВыдает исключение\nПри попытке выбросить недопустимое количество предметов.\nСмотрите также\nselect",
      },
      {
        name: "select",
        args: [{ arg_name: "slot", required: true }],
        type: "function",
        description:
          "Изменить выбранный в данный момент слот.\nВыбранный слот определяет, на какой слот будут воздействовать такие действия, как выброс или получение количества предметов.\nПараметры\nномер слота Слот для выбора.\nВозвращает\nистина Когда слот был выбран.\nГенерирует исключение\nЕсли слот выходит за пределы диапазона.\nСмотрите также\ngetSelectedSlot",
      },
      {
        name: "getItemCount",
        args: [{ arg_name: "slot", required: false }],
        type: "function",
        description:
          "Получить количество предметов в указанном слоте.\nПараметры\nslot? number Слот, который мы хотим проверить. По умолчанию выбран текущий слот.\nВозвращаемое значение\nnumber Количество предметов в этом слоте.\nИсключения\nЕсли номер слота выходит за допустимые пределы.",
      },
      {
        name: "getItemSpace",
        args: [{ arg_name: "slot", required: false }],
        type: "function",
        description:
          "Получите оставшееся количество предметов, которые могут быть сохранены в этом стеке. \nНапример, если в слоте находится 13 блоков земли, в нем есть место для еще 51.\nПараметры\nslot? number Слот, который мы хотим проверить. По умолчанию выбран текущий слот.\nВозвращает\nnumber Оставшееся место в этом слоте.\nВыдает ошибку\nЕсли указанный слот выходит за допустимые пределы.",
      },
      {
        name: "detect",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          'Проверьте, есть ли спереди черепахи твердый блок. В данном случае под "твердым" подразумевается любой блок, который не является воздухом или жидкостью.\n\nВозвращает:\nboolean Если спереди находится твердый блок.',
      },
      {
        name: "detectUp",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          'Проверьте, есть ли твердый блок над черепахой. В данном случае под "твердым" подразумевается любой блок, не являющийся воздухом или жидкостью.\nВозвращает\nboolean Если над черепахой есть твердый блок.',
      },
      {
        name: "detectDown",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          'Проверьте, есть ли под черепахой твердый блок. Термин "твердый" относится к любым блокам, кроме воздуха или жидкости.\nВозвращает:\nboolean Если под черепахой находится твердый блок.',
      },
      {
        name: "compare",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Проверить, равен ли блок перед черепахой предмету в текущем выбраном слоте.\nВозвращаемое значение:\nboolean Если блок и предмет равны.",
      },
      {
        name: "compareUp",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Проверьте, совпадает ли блок над черепахой с предметом в текущем выбранном слоте.\nВозвращаемое значение\nboolean Возвращает true, если блок и предмет совпадают.",
      },
      {
        name: "compareDown",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Проверьте, равен ли блок под черепахой предмету в выбранном на данный момент слоте.\nВозвращает\nboolean Если блок и предмет равны.",
      },
      {
        name: "attack",
        args: [{ arg_name: "side", required: false }],
        type: "function",
        description:
          "Атаковать сущность перед черепахой.\nПараметры\nside? string Конкретный инструмент для использования.\nВозвращаемые значения\nboolean Была ли атакована сущность.string | nil Причина, по которой ничего не было атаковано.",
      },
      {
        name: "attackUp",
        args: [{ arg_name: "side", required: false }],
        type: "function",
        description:
          "Атаковать существо над черепахой.\nПараметры\nside? string Специфичный инструмент для использования.\nВозвращает\nboolean Было ли атаковано существо. string | nil Причина, по которой атака не была произведена.",
      },
      {
        name: "attackDown",
        args: [{ arg_name: "side", required: false }],
        type: "function",
        description:
          "Атаковать сущность под черепахой.\nПараметры\nside? string Конкретный инструмент для использования.\nВозвращает\nboolean Была ли сущность атакована.string | nil Причина, по которой атака не была осуществлена.",
      },
      {
        name: "suck",
        args: [{ arg_name: "count", required: false }],
        type: "function",
        description:
          "Засосать предмет из инвентаря перед черепахой или из предмета, плавающего в мире.\nЭто переместит предметы в первый подходящий слот, начиная с текущего выбранного.\nПараметры:\ncount? number Количество предметов для засасывания. Если не указано, будет поднят один стак предметов.\nВозвраты:\nboolean Были ли подняты предметы. string | nil Причина, по которой предметы не были подняты.\nИсключения:\nЕсли задано недопустимое количество предметов.",
      },
      {
        name: "suckUp",
        args: [{ arg_name: "count", required: false }],
        type: "function",
        description:
          "Всосать предмет из инвентаря над черепахой или из предмета, плавающего в мире.  \nПараметры  \ncount? число Количество предметов для всасывания. Если не указано, будет подобрана стопка предметов.  \nВозвращает  \nboolean Были ли подняты предметы.string | nil Причина, по которой предметы не были подняты.  \nВызывает ошибку  \nЕсли указано неверное число предметов.",
      },
      {
        name: "suckDown",
        args: [{ arg_name: "count", required: false }],
        type: "function",
        description:
          "Захват предмета из инвентаря под черепахой или с предмета, валяющегося в мире.\nПараметры\ncount? число Количество предметов для захвата. Если не указано, захватывается до одного стака предметов.\nВозвращаемые значения\nboolean Были ли захвачены предметы. string | nil Причина, по которой предметы не были захвачены.\nИсключения\nВ случае указания неверного количества предметов.",
      },
      {
        name: "getFuelLevel",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          'Получите максимальное количество топлива, которым на данный момент обладает эта черепаха.\nВозвращает\nчисло Текущее количество топлива, которым обладает эта черепаха.\nИли\n"неограниченно" Если черепахи не потребляют топливо при перемещении.\nСмотрите также\ngetFuelLimit, refuel',
      },
      {
        name: "refuel",
        args: [{ arg_name: "count", required: false }],
        type: "function",
        description:
          'Заправьте эту черепаху.\nХотя большинство действий, которые может выполнять черепаха (таких как копание или размещение блоков) бесплатны, перемещение потребляет топливо из\nвнутреннего буфера черепахи. Если у черепахи нет топлива, она не сможет перемещаться.\nКоманда refuel заправляет черепаху, потребляя топливные предметы (такие как уголь или ведра с лавой) из\nвыбранного на данный момент слота и преобразуя их в энергию. Это продолжается до тех пор, пока черепаха полностью не заправится или все предметы не будут израсходованы.\nПараметры\ncount? number Максимальное количество предметов для потребления. Можно передать 0, чтобы проверить, является ли предмет сгораемым или нет.\nВозвращает\ntrue Если черепаха была заправлена.\nИли\nfalse Если черепаха не была заправлена. string Причина, по которой черепаха не была заправлена.\nВыбрасывает\nЕсли количество заправки вне допустимого диапазона.\nИспользование\nЗаправьте черепаху из выбранного на данный момент слота.\nlocal level = turtle.getFuelLevel()\nif level == "unlimited" then error("Черепахе не нужно топливо", 0) end\nlocal ok, err = turtle.refuel()\nif ok then\n  local new_level = turtle.getFuelLevel()\n  print(("Заправлено на %d, текущий уровень %d"):format(new_level - level, new_level))\nelse\n  printError(err)\nend\nПроверьте, является ли текущий предмет допустимым источником топлива.\nlocal is_fuel, reason = turtle.refuel(0)\nif not is_fuel then printError(reason) end\nСмотрите также\ngetFuelLevel getFuelLimit',
      },
      {
        name: "compareTo",
        args: [{ arg_name: "slot", required: true }],
        type: "function",
        description:
          "Сравните предмет в текущем выбранном слоте с предметом в другом слоте.\nПараметры\nномер слота Слот, с которым следует сравнить.\nВозвращаемые значения\nбулево Значение true, если два предмета равны.\nИсключения\nЕсли номер слота выходит за допустимые пределы.",
      },
      {
        name: "transferTo",
        args: [
          { arg_name: "slot", required: false },
          { arg_name: "count", required: false },
        ],
        type: "function",
        description:
          "Переместить предмет из выбранного слота в другой. \nПараметры \nslot number Номер слота, в который нужно переместить предмет. count? number Максимальное количество предметов для перемещения. \nВозврат \nboolean Были ли успешно перемещены некоторые предметы. \nИсключения \nЕсли номер слота выходит за допустимые пределы. \nЕсли количество предметов выходит за допустимые пределы.",
      },
      {
        name: "getSelectedSlot",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Получить текущий выбранный слот.\nВозвращает\nnumber Текущий слот.\nСмотрите также\nselect",
      },
      {
        name: "getFuelLimit",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          'Получите максимальное количество топлива, которое может вместить эта черепаха.\nПо умолчанию обычные черепахи имеют лимит в 20,000, а продвинутые черепахи - 100,000.\nВозвращает\nчисло Максимальное количество топлива, которое может вместить черепаха.\nИли\n"неограниченно" Если черепахи не расходуют топливо при перемещении.\nСмотрите также\ngetFuelLevel refuel',
      },
      {
        name: "equipLeft",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Оснащение (или снятие) предмета с левой стороны этой черепахи.\nЭта функция находит предмет в текущем выбранном слоте и пытается оснастить его на левую сторону черепахи.\nПредыдущее улучшение удаляется и помещается в инвентарь черепахи. Если в слоте нет предмета, предыдущее\nулучшение снимается, но новое не устанавливается.\nВозвращает:\ntrue - если предмет был оснащен.\nили\nfalse - если оснастить предмет не удалось. Строка с причиной, по которой не удалось оснастить предмет.\nСмотрите также:\nequipRight",
      },
      {
        name: "equipRight",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Оснастить (или снять) предмет с правой стороны этой черепахи.\nЭто находит предмет в текущем выбранном слоте и пытается оснастить его на правую сторону черепахи. Предыдущее улучшение удаляется и помещается в инвентарь черепахи. Если в слоте нет предмета, предыдущее улучшение удаляется, но новое не устанавливается.\nВозвращает\ntrue Если предмет был оснащен.\nИли\nfalse Если оснастить предмет не удалось. string Причина, по которой не удалось оснастить этот предмет.\nСмотрите также\nequipLeft",
      },
      {
        name: "inspect",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          'Получите информацию о блоке перед черепахой.\nВозвращает\nboolean Есть ли блок перед черепахой. table | string Информация о блоке спереди или сообщение, объясняющее отсутствие блока.\nПрименение\nlocal has_block, data = turtle.inspect()\nif has_block then\n  print(textutils.serialise(data))\n  -- {\n  --   name = "minecraft:oak_log",\n  --   state = { axis = "x" },\n  --   tags = { ["minecraft:logs"] = true, ... },\n  -- }\nelse\n  print("Перед черепахой нет блока")\nend',
      },
      {
        name: "inspectUp",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Получите информацию о блоке над черепахой.\nВозвращает\nboolean Есть ли блок над черепахой.table | string Информация о блоке сверху, или сообщение о том, что блока нет.",
      },
      {
        name: "inspectDown",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Получить информацию о блоке под черепахой.\nВозвращает\nboolean Есть ли блок под черепахой.\ntable | string Информация о блоке ниже, или сообщение, объясняющее, что блока нет.",
      },
      {
        name: "getItemDetail",
        args: [
          { arg_name: "slot", required: false },
          { arg_name: "detailed", required: false },
        ],
        type: "function",
        description:
          'Получите подробную информацию о предметах в указанном слоте.\nПараметры\nslot? number - Слот, о котором нужно получить информацию. По умолчанию выбирается текущий слот.\ndetailed? boolean - Включить ли "подробную" информацию. При значении true метод будет содержать гораздо\nбольше информации о предмете, но его выполнение займет больше времени.\nВозвращает\nnil | table - Информация о данном слоте или nil, если он пуст.\nВыбрасывает исключение\nЕсли слот находится вне допустимого диапазона.\nПример использования\nВыведите информацию о текущем слоте, предполагая, что он содержит 13 блоков земли.\nprint(textutils.serialise(turtle.getItemDetail()))\n-- => {\n--  name = "minecraft:dirt",\n--  count = 13,\n-- }\nСмотрите также\ninventory.getItemDetail - Описывает информацию, возвращаемую при подробном запросе.',
      },
    ],
  },
  {
    name: "gps",
    help_url: "https://tweaked.cc/module/gps.html#v:",
    list_docs: [
      {
        name: "CHANNEL_GPS = 65534",
        type: "const",
        description: "Канал, на котором транслируются запросы и ответы GPS.",
      },
      {
        name: "locate",
        args: [
          { arg_name: "timeout", required: false },
          { arg_name: "debug", required: false },
        ],
        type: "function",
        description:
          "Пытается определить собственное местоположение компьютера или черепахи.\nПараметры\ntimeout? число = 2 Максимальное время в секундах, в течение которого устанавливается наша позиция.\ndebug? логический = false Печатать сообщения отладки\nВозвращает\nчисло Позиция x этого компьютера.\nчисло Позиция y этого компьютера.\nчисло Позиция z этого компьютера.\nИли\nnil Если позиция не может быть установлена.",
      },
    ],
  },
  {
    name: "os",
    help_url: "https://tweaked.cc/module/os.html#v:",
    list_docs: [
      {
        name: "pullEvent",
        args: [{ arg_name: "filter", required: false }],
        type: "function",
        description:
          'Приостановка выполнения текущего потока и ожидание любых событий, соответствующих фильтру.\nЭта функция приостанавливает текущий процесс и ожидает его возобновления с переменной списком, где первый элемент соответствует фильтру.\nЕсли фильтр не указан, будут соответствовать все события.\nВ отличие от os.pullEventRaw, она остановит приложение при событии "terminate", печатая ошибку "Terminated".\nПараметры\nfilter? string Событие для фильтрации.\nВозвращает\nstring event Имя произошедшего события. any param... Дополнительные необязательные параметры события.\nИспользование\nСлушаем события нажатия мыши.\nwhile true do\n    local event, button, x, y = os.pullEvent("mouse_click")\n    print("Кнопка", button, "была нажата в", x, ",", y)\nend\nСлушаем несколько событий.\nwhile true do\n    local eventData = {os.pullEvent()}\n    local event = eventData[1]\n    if event == "mouse_click" then\n        print("Кнопка", eventData[2], "была нажата в", eventData[3], ",", eventData[4])\n    elseif event == "key" then\n        print("Код клавиши", eventData[2], "был нажат")\n    end\nend\nСмотрите также\nos.pullEventRaw для обработки события завершения.',
      },
      {
        name: "pullEventRaw",
        args: [{ arg_name: "filter", required: false }],
        type: "function",
        description:
          'Приостанавливает выполнение текущего потока и ожидает события, включая событие завершения.\nЭто ведет себя почти так же, как os.pullEvent, за исключением того, что позволяет вам самостоятельно обрабатывать событие завершения - программа не прекратит выполнение при нажатии Ctrl+T.\nПараметры\nfilter? string Событие для фильтрации.\nВозвращает\nstring event Название произошедшего события. any param... Дополнительные необязательные параметры события.\nИспользование\nСлушать события завершения.\nwhile true do\n    local event = os.pullEventRaw()\n    if event == "terminate" then\n        print("Поймано событие завершения!")\n    end\nend\nСмотрите также\nos.pullEvent для обычного извлечения событий.',
      },
      {
        name: "sleep",
        args: [{ arg_name: "time", required: true }],
        type: "function",
        description:
          "Приостанавливает выполнение на указанное количество секунд, является псевдонимом _G.sleep.\nПараметры\ntime number Количество секунд для ожидания, округленное до ближайшего кратного 0.05.",
      },
      {
        name: "version",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Получить текущую версию CraftOS (например, CraftOS 1.9).\nЭто определено в файле bios.lua. Для текущей версии CC:Tweaked,\nэто должно вернуть CraftOS 1.9.\nВозвращаемое значение\nstring Текущая версия CraftOS.\nИспользование\nos.version()",
      },
      {
        name: "run",
        args: [
          { arg_name: "env", required: true },
          { arg_name: "path", required: true },
          { arg_name: "...args", required: false },
        ],
        type: "function",
        description:
          'Запустите программу по указанному пути с заданным окружением и аргументами.\nЭта функция не разрешает имена программ, как это делает оболочка. Это означает, что, например, os.run("edit") не сработает. Кроме того, она не предоставляет доступ к API оболочки в этом окружении. Для такого поведения используйте вместо этого shell.run.\nЕсли программа не может быть найдена или не удалось ее запустить, она выведет ошибку и вернет false. Если вы хотите обработать это более изящно, используйте альтернативу вроде loadfile.\nПараметры\nenv table - окружение для запуска программы.\npath string - точный путь программы для запуска.\n... - аргументы, которые нужно передать программе.\nВозвращает\nboolean - удалось ли успешно запустить программу.\nИспользование\nЗапустите стандартную оболочку из своей программы:\nos.run({}, "/rom/programs/shell.lua")\nСмотрите также\nshell.run loadfile',
      },
      {
        name: "queueEvent",
        args: [
          { arg_name: "name", required: true },
          { arg_name: "...args", required: false },
        ],
        type: "function",
        description:
          "Добавляет событие в очередь событий. Это событие может быть получено позже с помощью\nos.pullEvent.\nПараметры\nname string Название события для добавления в очередь.... Параметры события. Это могут быть любые примитивные типы (boolean, number, string), а также\nтаблицы. Другие типы (например, функции), а также метатаблицы, не будут сохранены.\nСмотрите также\nos.pullEvent для получения события из очереди",
      },
      {
        name: "startTimer",
        args: [{ arg_name: "timer", required: true }],
        type: "function",
        description:
          "Запускает таймер, который будет работать в течение указанного числа секунд. После срабатывания таймера в очередь будет добавлено событие таймера с\nID, возвращенным из этой функции, в качестве первого параметра.\nКак и в случае с функцией sleep, время таймера будет автоматически округлено\nдо ближайшего кратного 0.05 секунд, поскольку он ожидает фиксированное количество\nтиков мира.\nПараметры\ntimer number Количество секунд до срабатывания таймера.\nВозвращает\nnumber ID нового таймера. Этот ID можно использовать для фильтрации\nсобытия таймера или для отмены таймера.\nВыбрасывает\nЕсли время меньше нуля.\nСм. также\ncancelTimer Для отмены таймера.",
      },
      {
        name: "cancelTimer",
        args: [{ arg_name: "token", required: true }],
        type: "function",
        description:
          "Отменяет таймер, ранее запущенный с помощью startTimer. Это остановит\nсрабатывание таймера.\nПараметры\ntoken number Идентификатор таймера, который нужно отменить.\nСмотрите также\nstartTimer Чтобы запустить таймер.",
      },
      {
        name: "setAlarm",
        args: [{ arg_name: "time", required: true }],
        type: "function",
        description:
          "Устанавливает будильник, который сработает в указанное внутриигровое время. Когда он\nсработает, * в очередь событий будет добавлено событие будильника с\nID *, возвращаемым этой функцией в качестве первого параметра.\nПараметры\ntime number Время срабатывания будильника, в пределах [0.0, 24.0).\nВозвращает\nnumber ID нового будильника. Этот ID можно использовать для фильтрации\nсобытия будильника или для его отмены.\nВыбрасывает исключение\nЕсли время указано вне допустимого диапазона.\nСмотрите также\ncancelAlarm Для отмены будильника.",
      },
      {
        name: "cancelAlarm",
        args: [{ arg_name: "token", required: true }],
        type: "function",
        description:
          "Отменяет ранее установленный с помощью setAlarm будильник. Это предотвратит\nсрабатывание будильника.\nПараметры\ntoken number Идентификатор будильника для отмены.\nСмотрите также\nsetAlarm Чтобы установить будильник.",
      },
      {
        name: "shutdown",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description: "Выключает компьютер немедленно.",
      },
      {
        name: "reboot",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description: "Перезагружает компьютер немедленно.",
      },
      {
        name: "getComputerID",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Возвращает идентификатор компьютера.\nВозвращаемое значение:\nчисло Идентификатор компьютера.",
      },
      {
        name: "computerID",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Возвращает идентификатор компьютера.  \nВозвращаемое значение:  \nnumber - Идентификатор компьютера.",
      },
      {
        name: "getComputerLabel",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Возвращает метку компьютера или nil, если метка не установлена.\nВозврат\nstring | nil Метка компьютера.",
      },
      {
        name: "computerLabel",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Возвращает метку компьютера или nil, если метка не установлена.\nВозвращаемое значение\nstring | nil Метка компьютера.",
      },
      {
        name: "setComputerLabel",
        args: [{ arg_name: "label", required: false }],
        type: "function",
        description:
          "Установите метку этого компьютера.\nПараметры\nlabel? string Новая метка. Может быть nil для её сброса.",
      },
      {
        name: "clock",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Возвращает количество секунд, в течение которых компьютер был включен.\nВозвращаемое значение:\nчисло Время работы компьютера.",
      },
      {
        name: "time",
        args: [{ arg_name: "locale", required: false }],
        type: "function",
        description:
          'Возвращает текущее время в зависимости от переданной строки. Значение всегда находится в диапазоне [0.0, 24.0).\nЕсли вызвана с параметром ingame, будет возвращено текущее время в мире.\nЭто параметр по умолчанию, если другой не указан.\nЕсли вызвана с параметром utc, возвращает час дня по всемирному координированному времени (UTC).\nЕсли вызвана с параметром local, возвращает час дня в часовом поясе, где находится сервер.\nЭта функция также может быть вызвана с таблицей, полученной из функции date, которая преобразует поля даты в временную метку UNIX (количество секунд с 1 января 1970 года).\nПараметры\nlocale? string | table Локаль времени или таблица, заполненная через os.date("*t"), для декодирования. По умолчанию используется локаль ingame, если не указано иное.\nВозвращает\nany Час выбранной локали или временную метку UNIX из таблицы, в зависимости от переданного аргумента.\nБросает\nЕсли передана неверная локаль.\nИспользование\nВывод текущего времени в игре.\ntextutils.formatTime(os.time())\nСмотрите также\ntextutils.formatTime Для преобразования времени в строку, удобную для пользователя.\ndate Для получения таблицы дат, которую можно преобразовать с помощью этой функции.',
      },
      {
        name: "day",
        args: [{ arg_name: "args", required: false }],
        type: "function",
        description:
          "Возвращает день в зависимости от указанной локали.\nЕсли вызывается с параметром ingame, возвращает количество дней с момента\nсоздания мира. Это значение по умолчанию.\nЕсли вызывается с параметром utc, возвращает количество дней с 1 января\n1970 года по времени UTC.\nЕсли вызывается с параметром local, возвращает количество дней с 1\nянваря 1970 года по местному времени сервера.\nПараметры\nargs? string Локаль, для которой нужно получить день. По умолчанию используется ingame, если не установлено иное.\nВозвращает\nnumber День в зависимости от выбранной локали.\nВыбрасывает исключение\nЕсли передана неверная локаль.",
      },
      {
        name: "epoch",
        args: [{ arg_name: "args", required: false }],
        type: "function",
        description:
          'Возвращает количество миллисекунд с начала эпохи в зависимости от локали.\nЕсли вызвать с параметром ingame, возвращает количество миллисекунд с момента создания\nмира в игре. Это значение по умолчанию.\nЕсли вызвать с параметром utc, возвращает количество миллисекунд с 1\nянваря 1970 года в часовом поясе UTC.\nЕсли вызвать с параметром local, возвращает количество миллисекунд с 1\nянваря 1970 года в локальном часовом поясе сервера.\n🛈 infoВнутриигровой часовой пояс предполагает, что один Minecraft день составляет 86 400 000\nмиллисекунд. Поскольку один игровой день гораздо короче реального дня (20 минут), этот\nпоказатель изменяется быстрее реального времени — одна реальная секунда равна 72000\nвнутриигровым миллисекундам. Если вы хотите преобразовать это значение в реальное время, разделите его на 72000; для\nпреобразования в тики (где день составляет 24000 тиков), разделите на 3600.\nПараметры\nargs? string Локаль, для которой необходимо получить миллисекунды. По умолчанию установлено значение ingame, если не указано иное.\nВозвращает\nnumber Количество миллисекунд с начала эпохи в зависимости от выбранной локали.\nГенерирует исключение\nЕсли передана недопустимая локаль.\nПрименение\nПолучите текущее время и используйте функцию date для его преобразования в таблицу.\n-- Деление на 1000 переводит его из миллисекунд в секунды.\nlocal time = os.epoch("local") / 1000\nlocal time_table = os.date("*t", time)\nprint(textutils.serialize(time_table))',
      },
      {
        name: "date",
        args: [
          { arg_name: "format", required: false },
          { arg_name: "time", required: false },
        ],
        type: "function",
        description:
          'Возвращает строку даты (или таблицу) с использованием указанной строки формата и\nнеобязательного времени для форматирования.\nСтрока формата принимает те же форматы, что и функция strftime в C\n(http://www.cplusplus.com/reference/ctime/strftime/). Кроме того, она\nможет быть предварена восклицательным знаком (!), чтобы использовать время по UTC\nвместо локального времени сервера.\nЕсли формат точно *t (необязательно с префиксом !), будет возвращена\nтаблица. Эта таблица содержит поля для года, месяца,\nдня, часа, минуты, секунды, дня недели, дня года и информации о\nпереходе на летнее время. Эта таблица может быть преобразована в UNIX\nметку времени (дни с 1 января 1970 года) с помощью функции date.\nПараметры\nformat? string Формат возвращаемой строки. По умолчанию %c, что раскрывается в строку, похожую на "Сб дек 24 16:58:00 2011". time? number Время для преобразования в строку. По умолчанию - текущее время.\nВозвращает\nany Результирующая строка формата.\nВыбрасывает\nЕсли передан неверный формат.\nИспользование\nВывести текущую дату в удобочитаемой строке.\nos.date("%A %d %B %Y") -- Смотрите ссылку выше!',
      },
    ],
  },
  {
    name: "peripheral",
    help_url: "https://tweaked.cc/module/peripheral.html#v:",
    list_docs: [
      {
        name: "getNames",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Предоставляет список всех доступных периферийных устройств.\nЕсли устройство находится непосредственно рядом с системой, то его имя будет\nуказано как сторона, к которой оно прикреплено. Если устройство подключено через проводной\nмодем, то оно будет отображаться в соответствии с его именем в проводной сети.\nВозвращает\n{ string... } Список имен всех подключенных периферийных устройств.",
      },
      {
        name: "isPresent",
        args: [{ arg_name: "name", required: true }],
        type: "function",
        description:
          'Определяет наличие периферийного устройства с заданным именем.\nПараметры\nname string Сторона или сетевое имя, которое вы хотите проверить.\nВозвращает\nboolean Возвращает истину, если периферийное устройство присутствует с указанным именем.\nИспользование\nperipheral.isPresent("top")peripheral.isPresent("monitor_0")',
      },
      {
        name: "getType",
        args: [{ arg_name: "peripheral", required: true }],
        type: "function",
        description:
          'Получите типы именованного или обернутого периферийного устройства.\nПараметры\nperipheral string | table — имя периферийного устройства для поиска или\nобернутый экземпляр периферийного устройства.\nВозвращает\nstring... Типы периферийного устройства или nil, если устройство отсутствует.\nИспользование\nПолучите тип периферийного устройства над этим компьютером.\nperipheral.getType("top")',
      },
      {
        name: "hasType",
        args: [
          { arg_name: "peripheral", required: true },
          { arg_name: "peripheraltype", required: true },
        ],
        type: "function",
        description:
          "Проверьте, является ли периферийное устройство определенного типа.\nПараметры\nperipheral string | table Название периферийного устройства или экземпляр обернутого периферийного устройства.\nperipheral_type string Тип для проверки.\nВозвращает\nboolean | nil Если у периферийного устройства есть определенный тип, или nil, если его нет.",
      },
      {
        name: "getMethods",
        args: [{ arg_name: "name", required: true }],
        type: "function",
        description:
          "Получить все доступные методы для периферийного устройства с указанным именем.\nПараметры\nname string - Имя периферийного устройства для поиска.\nВозвращает\n{ string... } | nil - Список методов, предоставляемых этим периферийным устройством, или nil, если\nустройство отсутствует.",
      },
      {
        name: "getName",
        args: [{ arg_name: "peripheral", required: true }],
        type: "function",
        description:
          "Получить имя периферийного устройства, обернутого с помощью peripheral.wrap.\nПараметры\nperipheral table - периферийное устройство, имя которого нужно получить.\nВозвращает\nstring - имя данного периферийного устройства.",
      },
      {
        name: "call",
        args: [
          { arg_name: "name", required: true },
          { arg_name: "method", required: true },
          { arg_name: "...args", required: false },
        ],
        type: "function",
        description:
          'Вызовите метод у периферийного устройства с указанным именем.\nПараметры\nname string - Имя периферийного устройства, на котором нужно вызвать метод.\nmethod string - Имя метода... Дополнительные аргументы, которые нужно передать методу\nВозвращаемые значения\nЗначения, возвращаемые методом периферийного устройства.\nИспользование\nОткройте модем на верхней части этого компьютера.\nperipheral.call("top", "open", 1)',
      },
      {
        name: "wrap",
        args: [{ arg_name: "name", required: true }],
        type: "function",
        description:
          'Получить таблицу, содержащую все функции, доступные на периферии. Затем их можно вызвать вместо использования peripheral.call каждый раз.\n\nПараметры:  \nname string - Имя периферии для обертывания.\n\nВозвращается:  \ntable | nil - Таблица, содержащая методы периферии, или nil, если периферия с данным именем отсутствует.\n\nПример использования:  \nОткрыть модем на верхней части этого компьютера.  \nlocal modem = peripheral.wrap("top")  \nmodem.open(1)',
      },
      {
        name: "find",
        args: [
          { arg_name: "ty", required: false },
          { arg_name: "filter", required: false },
        ],
        type: "function",
        description:
          'Найти все периферийные устройства определенного типа и вернуть\nобернутые периферийные устройства.\nПараметры\nty string Тип периферийного устройства, которое нужно искать.\nfilter? function(name: string, wrapped: table):boolean Функция фильтра, которая принимает имя периферийного устройства и обернутую таблицу\nи возвращает, должно ли оно быть включено в результат.\nВозвращает\ntable... 0 или более обернутых периферийных устройств, соответствующих данным фильтрам.\nИспользование\nНайти все мониторы и сохранить их в таблицу, выводя на каждом "Hello".\nlocal monitors = { peripheral.find("monitor") }\nfor _, monitor in pairs(monitors) do\n  monitor.write("Hello")\nend\n\nНайти все беспроводные модемы, подключенные к этому компьютеру.\nlocal modems = { peripheral.find("modem", function(name, modem)\n    return modem.isWireless() -- Проверить, является ли этот модем беспроводным.\nend) }\n\nЭто злоупотребление аргументом фильтра для вызова rednet.open на каждом модеме.\nperipheral.find("modem", rednet.open)',
      },
    ],
  },
  {
    name: "peripheral/monitor",
    help_url: "https://tweaked.cc/peripheral/monitor.html#v:",
    list_docs: [
      {
        name: "setTextScale",
        args: [{ arg_name: "scale", required: true }],
        type: "function",
        description:
          "Установите масштаб этого монитора. Больший масштаб приведет к снижению разрешения монитора, но отображению текста в более крупном размере.\nПараметры\nscale number Масштаб монитора. Он должен быть кратен 0.5 в диапазоне от 0.5 до 5.\nИсключения\nЕсли масштаб выходит за пределы допустимого диапазона.\nСм. также\ngetTextScale",
      },
      {
        name: "getTextScale",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Получить текущий масштаб текста монитора.\nВозвращает\nчисло Текущий масштаб монитора.\nВыбрасывает\nЕсли монитор не может быть найден.",
      },
      {
        name: "write",
        args: [{ arg_name: "text", required: true }],
        type: "function",
        description:
          "Напишите текст в текущей позиции курсора, переместив курсор в конец текста.\nВ отличие от функций, таких как write и print, это не переносит текст - оно просто копирует\nтекст на текущую строку терминала.\nПараметры\ntext string Текст для записи.",
      },
      {
        name: "scroll",
        args: [{ arg_name: "y", required: true }],
        type: "function",
        description:
          "Переместить все позиции вверх (или вниз) на y пикселей.\nКаждый пиксель в терминале будет заменен строкой, находящейся на y пикселей ниже. Если y отрицательное, он будет копировать пиксели сверху.\nПараметры\ny number Количество строк для перемещения вверх. Это может быть отрицательное число.",
      },
      {
        name: "getCursorPos",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Получить позицию курсора.\nВозвращает\nnumber Позиция x курсора. number Позиция y курсора.",
      },
      {
        name: "setCursorPos",
        args: [
          { arg_name: "x", required: true },
          { arg_name: "y", required: true },
        ],
        type: "function",
        description:
          "Установите позицию курсора. Ввод в терминал будет начинаться с этой позиции.\nПараметры\nx число Новая x позиция курсора.y число Новая y позиция курсора.",
      },
      {
        name: "getCursorBlink",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Проверяет, мигает ли в данный момент курсор.\nВозвращает\nboolean Если курсор мигает.",
      },
      {
        name: "setCursorBlink",
        args: [{ arg_name: "blink", required: true }],
        type: "function",
        description:
          "Устанавливает, должен ли курсор быть видимым (и мигающим) в текущей позиции курсора.\nПараметры\nblink boolean Должен ли курсор мигать.",
      },
      {
        name: "getSize",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Получить размер терминала.\nВозвращает\nчисло Ширина терминала. число Высота терминала.",
      },
      {
        name: "clear",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description: "Очищает терминал, заполняя его текущим цветом фона.",
      },
      {
        name: "clearLine",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Очищает строку, на которой находится курсор, заполняя ее текущим цветом фона.",
      },
      {
        name: "getTextColour",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Возвращает цвет, которым будет написан новый текст.\nВозвращаемое значение\nчисло Текущий цвет текста.\nСмотрите также\ncolors Для списка констант цветов, возвращаемых этой функцией.",
      },
      {
        name: "getTextColor",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Возвращает цвет, который будет использован для написания нового текста.\nВозвращает\nчисло Текущий цвет текста.\nСмотрите также\ncolors Для списка констант цветов, возвращаемых этой функцией.",
      },
      {
        name: "setTextColour",
        args: [{ arg_name: "colour", required: true }],
        type: "function",
        description:
          "Установите цвет, в котором будет написан новый текст.\nПараметры\nномер цвета Новый цвет текста.\nСмотрите также\ncolors Для списка констант цвета.",
      },
      {
        name: "setTextColor",
        args: [{ arg_name: "colour", required: true }],
        type: "function",
        description:
          "Установите цвет, в котором будет написан новый текст.\nПараметры\nnumber colour Новый цвет текста.\nСм. также\ncolors Список констант цвета.",
      },
      {
        name: "getBackgroundColour",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Возвращает текущий цвет фона. Используется при написании текста и очистке\nтерминала.\nВозвращает\nчисло Текущий цвет фона.\nСмотрите также\ncolors Для списка констант цветов, возвращаемых этой функцией.",
      },
      {
        name: "getBackgroundColor",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Возвращает текущий цвет фона. Используется при выводе текста и очистке\nтерминала.\nВозвращает\nчисло Текущий цвет фона.\nСмотрите также\ncolors Для списка констант цветов, возвращаемых этой функцией.",
      },
      {
        name: "setBackgroundColour",
        args: [{ arg_name: "colour", required: true }],
        type: "function",
        description:
          "Установите текущий цвет фона. Это используется при написании текста и очистке терминала.\nПараметры\nцвет число Новый цвет фона.\nСмотрите также\ncolors Для списка констант цветов.",
      },
      {
        name: "setBackgroundColor",
        args: [{ arg_name: "colour", required: true }],
        type: "function",
        description:
          "Установите текущий цвет фона. Это используется при написании текста и очистке терминала.\nПараметры\nномер цвета Новый цвет фона.\nСмотрите также\ncolors Для списка констант цветов.",
      },
      {
        name: "isColour",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Определите, поддерживает ли данный терминал цвет. \nТерминалы, которые не поддерживают цвет, все равно позволяют писать цветной текст/фон, но он будет \nотображаться в градациях серого.\nВозвращает\nboolean Поддерживает ли этот терминал цвет.",
      },
      {
        name: "isColor",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Определите, поддерживает ли этот терминал цвета.\nТерминалы, не поддерживающие цвет, все равно позволят выводить текст/фон в цвете, но он будет\nотображаться в градациях серого.\nВозвращаемые значения\nboolean Указывает, поддерживает ли этот терминал цвета.",
      },
      {
        name: "blit",
        args: [
          { arg_name: "text", required: true },
          { arg_name: "textColour", required: true },
          { arg_name: "backgroundColour", required: true },
        ],
        type: "function",
        description:
          'Записывает текст на терминал с заданными цветами переднего плана и фона.  \nКак и в случае write, текст будет написан в текущей позиции курсора, при этом курсор  \nпереместится в конец текста.  \ntextColour и backgroundColour должны быть строками, длиной равной тексту. Все  \nсимволы представляют собой одну шестнадцатеричную цифру, которая преобразуется в один из цветов CC. Например,  \n"a" соответствует пурпурному.  \nПараметры  \ntext string Текст для записи.textColour string Соответствующие цвета текста.backgroundColour string Соответствующие цвета фона.  \nВыбрасывает  \nЕсли три входных значения не имеют одинаковой длины.  \nИспользование  \nПечатает "Привет, мир!" в тексте радуги.  \nterm.blit("Hello, world!", "01234456789ab", "0000000000000")  \nСмотрите также  \ncolors Для списка констант цветов и их шестнадцатеричных значений.',
      },
      {
        name: "setPaletteColour",
        args: [{ arg_name: "...args", required: false }],
        type: "function",
        description:
          'Установка палитры для конкретного цвета.\nСистема палитры ComputerCraft позволяет вам изменять отображение определенного цвета. Например, вы\nможете сделать colors.red более красным, установив его палитру на #FF0000. Это не позволяет вам рисовать больше\nцветов - вы все еще ограничены 16 цветами на экране одновременно - но вы можете изменить, какие цвета\nиспользуются.\nПараметры\nindex number Цвет, палитра которого должна быть изменена. colour number 24-битное целое число, представляющее значение RGB цвета. Например, целое\nчисло 0xFF0000 соответствует цвету #FF0000.\nИли\nindex number Цвет, палитра которого должна быть изменена. r number Интенсивность красного канала, от 0 до 1. g number Интенсивность зеленого канала, от 0 до 1. b number Интенсивность синего канала, от 0 до 1.\nИспользование\nИзмените красный цвет с дефолтного #CC4C4C на #FF0000.\nterm.setPaletteColour(colors.red, 0xFF0000)\nterm.setTextColour(colors.red)\nprint("Привет, мир!") Как выше, но каждый цветовой канал указывается отдельно.\nterm.setPaletteColour(colors.red, 1, 0, 0)\nterm.setTextColour(colors.red)\nprint("Привет, мир!")\nСмотрите также\ncolors.unpackRGB Для конвертации из 24-битного формата в три отдельных канала.colors.packRGB Для конвертации из трех отдельных каналов в 24-битный формат.',
      },
      {
        name: "setPaletteColor",
        args: [{ arg_name: "...args", required: false }],
        type: "function",
        description:
          'Настройте палитру для определенного цвета.\nСистема палитры ComputerCraft позволяет вам изменить то, как отображается определенный цвет. Например, вы\nможете сделать colors.red более красным, установив для него палитру #FF0000. Это не позволяет вам рисовать больше\nцветов - вы все еще ограничены 16 цветами на экране одновременно - но вы можете изменить, какие цвета\nиспользуются.\nПараметры\nindex number Цвет, палитру которого следует изменить. colour number 24-битное целое число, представляющее значение RGB цвета. Например, целое число\n0xFF0000 соответствует цвету #FF0000.\nИли\nindex number Цвет, палитру которого следует изменить. r number Интенсивность красного канала, от 0 до 1. g number Интенсивность зеленого канала, от 0 до 1. b number Интенсивность синего канала, от 0 до 1.\nИспользование\nИзмените красный цвет с стандартного #CC4C4C на #FF0000.\nterm.setPaletteColour(colors.red, 0xFF0000)\nterm.setTextColour(colors.red)\nprint("Привет, мир!")\nКак указано выше, но с отдельной спецификацией каждого канала цвета.\nterm.setPaletteColour(colors.red, 1, 0, 0)\nterm.setTextColour(colors.red)\nprint("Привет, мир!")\nСм. также\ncolors.unpackRGB Чтобы конвертировать из 24-битного формата в три отдельных канала. colors.packRGB Чтобы конвертировать из трех отдельных каналов в 24-битный формат.',
      },
      {
        name: "getPaletteColour",
        args: [{ arg_name: "colour", required: true }],
        type: "function",
        description:
          "Получите текущую палитру для определенного цвета.  \nПараметры  \nчисло цвета Цвет, для которого должна быть получена палитра.  \nВозвращаемые значения  \nчисло Красный канал, будет между 0 и 1.  \nчисло Зеленый канал, будет между 0 и 1.  \nчисло Синий канал, будет между 0 и 1.",
      },
      {
        name: "getPaletteColor",
        args: [{ arg_name: "colour", required: true }],
        type: "function",
        description:
          "Получить текущую палитру для определенного цвета.\nПараметры\nчисло цвета Цвет, палитру которого следует получить.\nВозвращаемые значения\nчисло Красный канал, будет в пределах от 0 до 1.\nчисло Зеленый канал, будет в пределах от 0 до 1.\nчисло Синий канал, будет в пределах от 0 до 1.",
      },
    ],
  },
  {
    name: "peripheral/computer",
    help_url: "https://tweaked.cc/peripheral/computer.html#v:",
    list_docs: [
      {
        name: "turnOn",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description: "Включите другой компьютер.",
      },
      {
        name: "shutdown",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description: "Выключите другой компьютер.",
      },
      {
        name: "reboot",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description: "Перезагрузите или включите другой компьютер.",
      },
      {
        name: "getID",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Получите ID другого компьютера.\nВозвращает\nчисло ID компьютера.\nСмотрите также\nos.getComputerID для получения ID вашего компьютера.",
      },
      {
        name: "isOn",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Определите, включен ли другой компьютер.\nВозвращает\nboolean Если компьютер включен.",
      },
      {
        name: "getLabel",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Получить метку другого компьютера.\nВозвращаемые значения\nstring | nil Метка компьютера.\nСмотрите также\nos.getComputerLabel Чтобы получить вашу метку.",
      },
    ],
  },
  {
    name: "peripheral/modem",
    help_url: "https://tweaked.cc/peripheral/modem.html#v:",
    list_docs: [
      {
        name: "open",
        args: [{ arg_name: "channel", required: true }],
        type: "function",
        description:
          "Откройте канал на модеме. Канал должен быть открыт для получения сообщений. Одновременно модем может поддерживать до 128 открытых каналов.\nПараметры\nномер канала Канал, который нужно открыть. Это должно быть число от 0 до 65535.\nИсключения\nЕсли номер канала выходит за пределы допустимого диапазона.\nЕсли открыто слишком много каналов.",
      },
      {
        name: "isOpen",
        args: [{ arg_name: "channel", required: true }],
        type: "function",
        description:
          "Проверить, открыт ли канал.\nПараметры\nномер канала Канал для проверки.\nВозвращает\nboolean Открыт ли канал.\nВыбрасывает\nЕсли канал вне диапазона.",
      },
      {
        name: "close",
        args: [{ arg_name: "channel", required: true }],
        type: "function",
        description:
          "Закрыть открытый канал, что означает, что он больше не будет получать сообщения.\nПараметры\nномер канала Канал для закрытия.\nИсключения\nЕсли номер канала выходит за допустимые пределы.",
      },
      {
        name: "closeAll",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description: "Закрыть все открытые каналы.",
      },
      {
        name: "transmit",
        args: [
          { arg_name: "channel", required: true },
          { arg_name: "replyChannel", required: true },
          { arg_name: "payload", required: true },
        ],
        type: "function",
        description:
          'Отправляет сообщение модема на определенный канал. Модемы, прослушивающие этот канал, добавляют в очередь событие `modem_message` на соседних компьютерах.\n🛈 примечание Канал не должен быть открытым, чтобы отправить сообщение.\nПараметры\nchannel number - номер канала, на который отправляются сообщения.\nreplyChannel number - номер канала, на который должны быть отправлены ответы на это сообщение. Это может быть тот же канал или совершенно другой. Канал должен быть открыт на отправляющем компьютере, чтобы получать ответы.\npayload any - объект для отправки. Это может быть любой примитивный тип (boolean, number, string), а также таблицы. Другие типы (как функции), а также метатаблицы, не будут переданы.\nИсключения\nЕсли номер канала выходит за допустимые пределы.\nИспользование\nСоздайте связь с модемом и отправьте сообщение на канал 15, запрашивая ответ на канал 43.\n```lua\nlocal modem = peripheral.find("modem") or error("Модем не подключен", 0)\nmodem.transmit(15, 43, "Привет, мир!")\n```',
      },
      {
        name: "isWireless",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Определите, является ли это проводным или беспроводным модемом.\nНекоторые методы (в частности, те, что связаны с проводными сетями и удаленными периферийными устройствами) доступны только на проводных модемах.\nВозвращает\nлогическое значение true, если это беспроводной модем.",
      },
      {
        name: "getNamesRemote",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Перечислите все удалённые периферийные устройства в проводной сети.\nЕсли этот компьютер подключен к сети, он не будет включен в\nэтот список.\n🛈 Примечание: Эта функция доступна только на проводных модемах. Проверьте, что isWireless возвращает false, перед тем как вызвать её.\nВозвращает\n{ string... } Имена удалённых периферийных устройств в сети.",
      },
      {
        name: "isPresentRemote",
        args: [{ arg_name: "name", required: true }],
        type: "function",
        description:
          "Определить наличие периферийного устройства в этой проводной сети.\n🛈 примечаниеЭта функция доступна только на проводных модемах. Проверьте, что isWireless возвращает false, перед вызовом этой функции.\nПараметры\nname string Название периферийного устройства.\nВозвращает\nboolean boolean Возвращает true, если периферийное устройство с указанным именем присутствует.\nСмотрите также\nperipheral.isPresent",
      },
      {
        name: "getTypeRemote",
        args: [{ arg_name: "name", required: true }],
        type: "function",
        description:
          "Получить тип периферийного устройства, доступного в этой проводной сети.\n🛈 Примечание: Эта функция доступна только на проводных модемах. Проверьте, возвращает ли isWireless значение false, перед тем как вызывать ее.\nПараметры\nname string - имя периферийного устройства.\nВозвращает\nstring | nil - тип периферийного устройства, или nil, если устройство отсутствует.\nСмотрите также\nperipheral.getType",
      },
      {
        name: "hasTypeRemote",
        args: [
          { arg_name: "name", required: true },
          { arg_name: "type", required: true },
        ],
        type: "function",
        description:
          "Проверить, что периферийное устройство относится к определенному типу.\n🛈 Примечание: Эта функция доступна только на проводных модемах. Проверьте, возвращает ли isWireless значение false, перед тем как вызывать ее.\nПараметры\nname string Имя периферийного устройства. type string Тип для проверки.\nВозвращает\nboolean | nil Если периферийное устройство имеет определенный тип, или nil, если устройство отсутствует.\nСмотрите также\nperipheral.getType",
      },
      {
        name: "getMethodsRemote",
        args: [{ arg_name: "name", required: true }],
        type: "function",
        description:
          "Получите все доступные методы для удаленного периферийного устройства с указанным именем.\n🛈 примечание: Эта функция доступна только на проводных модемах. Проверьте, что isWireless возвращает false, перед тем как вызывать эту функцию.\nПараметры\nname string — Имя периферийного устройства.\nВозвращает\n{ string... } | nil — Список методов, предоставляемых этим периферийным устройством, или nil, если устройство отсутствует.\nСмотрите также\nperipheral.getMethods",
      },
      {
        name: "callRemote",
        args: [
          { arg_name: "remoteName", required: true },
          { arg_name: "method", required: true },
          { arg_name: "...args", required: false },
        ],
        type: "function",
        description:
          "Вызов метода на периферийном устройстве в этой проводной сети.\n🛈 Примечание. Эта функция доступна только в проводных модемах. Перед вызовом проверьте, что isWireless возвращает false.\nПараметры\nremoteName string — Название периферийного устройства, на котором будет вызван метод. method string — Название метода... Дополнительные аргументы, которые будут переданы методу.\nВозвращает\nstring — Возвращаемые значения метода периферийного устройства.\nСмотрите также\nperipheral.call",
      },
      {
        name: "getNameLocal",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Возвращает сетевое имя текущего компьютера, если модем включен. Это\nможет использоваться другими компьютерами в сети, чтобы определить этот компьютер как\nпериферийное устройство.\n🛈 Заметка: Эта функция доступна только на проводных модемах. Проверьте, что isWireless возвращает false, прежде чем вызывать её.\nВозвращает\nstring | nil Имя текущего компьютера в проводной сети.",
      },
    ],
  },
  {
    name: "peripheral/printer",
    help_url: "https://tweaked.cc/peripheral/printer.html#v:",
    list_docs: [
      {
        name: "write",
        args: [{ arg_name: "text", required: true }],
        type: "function",
        description:
          "Записывает текст на текущую страницу.\nПараметры\ntext string Значение, которое нужно записать на страницу.\nИсключения\nЕсли какие-либо значения не могут быть преобразованы в строку или если страница не была начата.",
      },
      {
        name: "getCursorPos",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Возвращает текущую позицию курсора на странице.\nВозвращает:\nnumber X-позиция курсора. number Y-позиция курсора.\nВыдает ошибку:\nЕсли страница не печатается.",
      },
      {
        name: "setCursorPos",
        args: [
          { arg_name: "x", required: true },
          { arg_name: "y", required: true },
        ],
        type: "function",
        description:
          "Устанавливает позицию курсора на странице.\nПараметры\nx number Координата X для установки курсора.\ny number Координата Y для установки курсора.\nВызывает ошибку\nЕсли страница не печатается.",
      },
      {
        name: "getPageSize",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Возвращает размер текущей страницы.\nВозвращаемое значение\nчисло Ширина страницы. число Высота страницы.\nВыдает исключение\nЕсли страница не печатается.",
      },
      {
        name: "newPage",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Начинает печать новой страницы.\nВозвращает\nboolean Может ли быть начата новая страница.",
      },
      {
        name: "endPage",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Завершает печать текущей страницы и выводит её в лоток. \nВозвращает \nboolean Определяет, была ли страница успешно завершена. \nВызывает ошибку \nЕсли страница не печатается.",
      },
      {
        name: "setPageTitle",
        args: [{ arg_name: "title", required: false }],
        type: "function",
        description:
          "Устанавливает заголовок текущей страницы.\nПараметры\ntitle? строка Заголовок, который нужно установить для страницы.\nВыбрасывает\nЕсли страница не печатается.",
      },
      {
        name: "getInkLevel",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Возвращает количество оставшихся чернил в принтере.\nВозвращаемое значение\nnumber Количество чернил, доступных для печати.",
      },
      {
        name: "getPaperLevel",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Возвращает количество оставшейся бумаги в принтере.\nВозвращаемое значение:\nчисло Количество доступной бумаги для печати.",
      },
    ],
  },
  {
    name: "peripheral/speaker",
    help_url: "https://tweaked.cc/peripheral/speaker.html#v:",
    list_docs: [
      {
        name: "playNote",
        args: [
          { arg_name: "instrument", required: false },
          { arg_name: "volume", required: false },
          { arg_name: "pitch", required: false },
        ],
        type: "function",
        description:
          'Воспроизводит ноту через динамик.\nДля этого используеется название ноты для воспроизведения, а также, при необходимости, громкость\nи высоту звука.\nАргумент высоты звука использует полутоны как единицу измерения. Это напрямую связано с\nколичеством кликов по нотному блоку. Для справки, значения 0, 12 и 24 соответствуют F#,\nа 6 и 18 - C.\nМаксимальное количество нот, которые можно воспроизвести за один тик, - 8. Если этот лимит достигнут, функция вернет\nfalse.\nДопустимые инструменты\nДинамик поддерживает все инструменты нотных блоков Minecraft.\nК ним относятся:\n"арфа" ("harp"), "большой барабан" ("basedrum"), "малый барабан" ("snare"), "хай-хэт" ("hat"), "бас" ("bass"), "флейта" ("flute"),\n"колокольчик" ("bell"), "гитара" ("guitar"), "колокол" ("chime"), "ксилофон" ("xylophone"), "железный ксилофон" ("iron_xylophone"),\n"коровий колокол" ("cow_bell"), "диджериду" ("didgeridoo"), "бит" ("bit"), "банджо" ("banjo") и "плинг" ("pling").\nПараметры\ninstrument string - инструмент для воспроизведения этой ноты.volume? number - громкость воспроизведения ноты, от 0.0 до 3.0. По умолчанию 1.0.pitch? number - высота звука ноты в полутонах, от 0 до 24. По умолчанию 12.\nВозвращает\nboolean - Смогла ли нота быть воспроизведена, так как был достигнут лимит.\nВыбрасывает исключение\nЕсли инструмент не существует.',
      },
      {
        name: "playSound",
        args: [
          { arg_name: "name", required: false },
          { arg_name: "volume", required: false },
          { arg_name: "pitch", required: false },
        ],
        type: "function",
        description:
          'Воспроизводит звук Minecraft через динамик.\nДля этого используется название звука Minecraft, например,\n"minecraft:block.note_block.harp", а также необязательные параметры громкости и высоты тона.\nВоспроизводиться может только один звук за раз. Эта функция вернёт false, если другой звук был запущен\nв этом тике, или если какой-то аудиофайл все еще воспроизводится.\nПараметры\nname string Название звука для воспроизведения.volume? number Громкость воспроизведения звука, от 0.0 до 3.0. По умолчанию 1.0.pitch? number Скорость воспроизведения звука, от 0.5 до 2.0. По умолчанию 1.0.\nВозвращаемое значение\nboolean Указывает, мог ли звук быть воспроизведен.\nИсключения\nЕсли название звука было неверным.\nПример использования\nВоспроизвести шипение крипера через динамик.\nlocal speaker = peripheral.find("speaker")\nspeaker.playSound("entity.creeper.primed")',
      },
      {
        name: "playAudio",
        args: [
          { arg_name: "audio", required: false },
          { arg_name: "volume", required: false },
        ],
        type: "function",
        description:
          'Попытка передачи аудиоданных в динамик.\nДинамик принимает список аудиосемплов в форме амплитуд от -128 до 127. Эти данные сохраняются во внутреннем буфере\nи воспроизводятся с частотой 48 кГц. Если этот буфер заполнен, функция вернет false. Вам следует подождать событие\nspeaker_audio_empty, прежде чем пытаться снова.\n🛈 Примечание: динамик буферизирует только один вызов функции playAudio за раз. Это означает, что если вы попытаетесь воспроизвести малое\nколичество семплов, звук будет прерывистым. Старайтесь воспроизводить как можно больше семплов за один вызов (до 128×1024),\nтак как это уменьшает вероятность заикания или остановки звука, особенно когда сервер или компьютер зависают.\nВоспроизведение аудио с помощью динамиков предоставляет более полное руководство по использованию динамиков.\nПараметры\naudio { number... } Список амплитуд. volume? number Уровень громкости для воспроизведения этого аудио. Если не указан, по умолчанию используется предыдущий уровень громкости,\nуказанный в playAudio.\nВозвращает\nboolean Если было место для принятия этого аудиоданных.\nВыбрасывает\nЕсли аудиоданные некорректны.\nИспользование\nПрочтите аудиофайл, декодируйте его с помощью cc.audio.dfpwm и воспроизведите через динамик.\nlocal dfpwm = require("cc.audio.dfpwm")\nlocal speaker = peripheral.find("speaker")\nlocal decoder = dfpwm.make_decoder()\nfor chunk in io.lines("data/example.dfpwm", 16 * 1024) do\n    local buffer = decoder(chunk)\n    while not speaker.playAudio(buffer) do\n        os.pullEvent("speaker_audio_empty")\n    end\nend\nСмотрите также\ncc.audio.dfpwm Предоставляет утилиты для декодирования DFPWM аудиофайлов в формат, который можно воспроизводить с помощью динамика. \nВоспроизведение аудио с помощью динамиков Для более полного введения в функцию playAudio.',
      },
      {
        name: "stop",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Остановить воспроизведение всего аудио этим динамиком.\nЭто очищает любое аудио, которое было поставлено в очередь функцией playAudio, и останавливает последний звук, воспроизведенный функцией playSound.",
      },
    ],
  },
  {
    name: "peripheral/command",
    help_url: "https://tweaked.cc/peripheral/command.html#v:",
    list_docs: [
      {
        name: "getCommand",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Получить команду, которую выполнит этот блок команд.\nВозвращает\nstring Текущая команда.",
      },
      {
        name: "setCommand",
        args: [{ arg_name: "command", required: true }],
        type: "function",
        description:
          "Установите команду блока команд.\nПараметры\ncommand string Новая команда.",
      },
      {
        name: "runCommand",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Выполните команду в блоке команд один раз.\nВозвращает\nboolean Если команда успешно выполнена. string | nil Сообщение о неудаче.",
      },
    ],
  },
  {
    name: "peripheral/drive",
    help_url: "https://tweaked.cc/peripheral/drive.html#v:",
    list_docs: [
      {
        name: "isDiskPresent",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Возвращает, вставлен ли в данный момент диск в дисковод.\nВозвращаемое значение\nboolean Вставлен ли диск в дисковод в данный момент.",
      },
      {
        name: "getDiskLabel",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Возвращает метку диска в приводе, если она доступна.\nВозвращаемые значения\nstring | nil Метка диска или nil, если диск не вставлен или у диска отсутствует метка.",
      },
      {
        name: "setDiskLabel",
        args: [{ arg_name: "label", required: false }],
        type: "function",
        description:
          "Устанавливает или очищает метку для диска.\nЕсли метка не указана или передано значение nil, метка будет очищена.\nЕсли метку вставленного диска изменить невозможно (например, это запись),\nбудет выдано исключение.\nПараметры\nlabel? string Новая метка диска или nil для очистки.\nИсключения\nЕсли метку диска изменить невозможно.",
      },
      {
        name: "hasData",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Возвращает, вставлен ли диск с данными.\nВозвращаемое значение:\nboolean Возвращает, вставлен ли диск с данными.",
      },
      {
        name: "getMountPath",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Возвращает путь монтирования для вставленного диска.\nВозвращаемые значения\nstring | nil Путь монтирования для диска или nil, если диск с данными не вставлен.",
      },
      {
        name: "hasAudio",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Возвращает информацию о том, есть ли вставленный диск с аудиозаписью.\nВозвращаемое значение\nboolean Информация о том, вставлен ли диск с аудиозаписью.",
      },
      {
        name: "getAudioTitle",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Возвращает название вставленного аудиодиска.\nВозвращает\nstring | nil | false Название аудио, false, если диск не вставлен, или nil, если на диске нет аудио.",
      },
      {
        name: "playAudio",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Воспроизводит аудио с вставленного диска, если оно доступно.",
      },
      {
        name: "stopAudio",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Останавливает воспроизведение любого аудио.\nСмотрите также\nplayAudio",
      },
      {
        name: "ejectDisk",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Извлекает любой диск, который может находиться в приводе.",
      },
      {
        name: "getDiskID",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          "Возвращает идентификатор диска, вставленного в привод.\nВозвращаемое значение\nnumber | nil Идентификатор диска в приводе, или nil, если диск с идентификатором не вставлен.",
      },
    ],
  },
  {
    name: "disk",
    help_url: "https://tweaked.cc/module/disk.html#v:",
    list_docs: [
      {
        name: "isPresent",
        args: [{ arg_name: "name", required: true }],
        type: "function",
        description:
          'Проверяет, находится ли какой-либо предмет в дисководе\nПараметры\nname string - Название дисковода.\nВозвращает\nboolean - Наличие предмета в дисководе.\nИспользование\ndisk.isPresent("top")',
      },
      {
        name: "getLabel",
        args: [{ arg_name: "name", required: true }],
        type: "function",
        description:
          "Получить метку дискеты, записи или других носителей в указанном дисководе.\nЕсли в дисководе находится компьютер или черепаха, метка будет установлена так, как она считывается с помощью os.getComputerLabel.\nПараметры\nname string - Имя дисковода.\nВозвращает\nstring | nil - Имя текущего носителя или nil, если дисковод отсутствует или пуст.\nСмотрите также\ndisk.setLabel",
      },
      {
        name: "setLabel",
        args: [
          { arg_name: "name", required: true },
          { arg_name: "label", required: true },
        ],
        type: "function",
        description:
          "Установите метку для гибкого диска или другого носителя\nПараметры\nname string - Название дисковода. label string | nil - Новая метка диска.",
      },
      {
        name: "hasData",
        args: [{ arg_name: "name", required: true }],
        type: "function",
        description:
          "Проверить, предоставляет ли текущий диск монтирование.\nЭто вернет true для дисков и компьютеров, но не для записей.\nПараметры\nname string Название дисковода.\nВозвращает\nboolean Если диск присутствует и предоставляет монтирование.\nСмотрите также\ndisk.getMountPath",
      },
      {
        name: "getMountPath",
        args: [{ arg_name: "name", required: true }],
        type: "function",
        description:
          "Найдите имя директории на локальном компьютере, где можно найти содержимое\nтекущей гибкой дисковода (или другого устройства).\nПараметры\nname string Имя дисковода.\nВозвращает\nstring | nil Директория устройства, или nil, если дисковод не\nсодержит гибкую дискету или компьютер.\nСмотрите также\ndisk.hasData",
      },
      {
        name: "hasAudio",
        args: [{ arg_name: "name", required: true }],
        type: "function",
        description:
          "Является ли текущий диск музыкальным диском, в отличие от гибкого диска\nили другого предмета.\nЕсли это вернет true, вы сможете воспроизвести запись.\nПараметры\nname string Название дисковода.\nВозвращает\nboolean Если диск присутствует и на нем сохранено аудио.",
      },
      {
        name: "getAudioTitle",
        args: [{ arg_name: "name", required: true }],
        type: "function",
        description:
          "Получить название аудиотрека с музыкальной пластинки в дисководе.\nОбычно возвращает то же, что и disk.getLabel для пластинок.\nПараметры\nname string — Имя дисковода.\nВозвращает\nstring | false | nil — название трека, false, если в дисководе нет музыкальной пластинки, или nil, если дисковод отсутствует.",
      },
      {
        name: "playAudio",
        args: [{ arg_name: "name", required: true }],
        type: "function",
        description:
          'Запускает воспроизведение музыкальной записи в приводе.\nЕсли какая-либо запись уже воспроизводится на любом дисководе, она останавливается перед тем,\nкак целевой привод начинает воспроизведение. Запись останавливается, когда она достигает конца\nтрека, когда она удаляется из привода, когда вызывается disk.stopAudio, или\nкогда начинается воспроизведение другой записи.\nПараметры\nname string - Имя дисковода.\nИспользование\ndisk.playAudio("bottom")',
      },
      {
        name: "stopAudio",
        args: [{ arg_name: "name", required: true }],
        type: "function",
        description:
          "Останавливает воспроизведение музыкальной записи в приводе, если она была начата с\ndisk.playAudio.\nПараметры\nname string Название дисковода.",
      },
      {
        name: "eject",
        args: [{ arg_name: "name", required: true }],
        type: "function",
        description:
          'Извлекает любой предмет, находящийся в приводе, выбрасывая его в мир как отдельный предмет.\nПараметры\nname string - Название дисковода.\nИспользование\ndisk.eject("bottom")',
      },
      {
        name: "getID",
        args: [{ arg_name: "name", required: true }],
        type: "function",
        description:
          "Возвращает число, которое уникально идентифицирует диск в приводе.\nОбратите внимание, в отличие от disk.getLabel, это не возвращает данных для других носителей,\nтаких как компьютеры или черепахи.\nПараметры\nname string Имя дисковода.\nВозвращает\nstring | nil ID диска, или nil, если в приводе нет гибкого диска.",
      },
    ],
  },
  {
    name: "fs",
    help_url: "https://tweaked.cc/module/fs.html#v:",
    list_docs: [
      {
        name: "complete",
        args: [{ arg_name: "...args", required: false }],
        type: "function",
        description:
          'Обеспечивает автозавершение для имени файла или директории, подходящее для использования\nс _G.read.\nКогда директория является возможным кандидатом для автозавершения, включаются две записи -\nодна с завершающим слешем (указывающим, что в этой директории существуют записи) и одна без него (означает, что эта запись является непосредственным кандидатом на завершение). include_dirs можно установить в false, чтобы включить только те с завершающим слешем.\nПараметры\npath string Путь для автозавершения.location string Местоположение, откуда разрешаются пути.include_files? boolean = true Когда false, будут включены только директории.include_dirs? boolean = true Когда false, "сырые" директории не будут включены в возвращаемый список.\nИли\npath string Путь для автозавершения.location string Местоположение, откуда разрешаются пути.options { include_dirs? = boolean, include_files? = boolean, include_hidden? = boolean } Эта табличная форма является расширенной версией предыдущего синтаксиса. Аргументы include_files и include_dirs из вышеуказанного передаются как поля.\nЭта таблица также принимает следующие опции:\ninclude_hidden: Включать ли скрытые файлы (начинающиеся с .)\nпо умолчанию. Они все равно будут показаны при наборе ..\nВозвращает\n{ string... } Список возможных кандидатов на завершение.\nИспользование\nЗавершить файлы в корневом каталоге.\nread(nil, nil, function(str)\n    return fs.complete(str, "", true, false)\nend) Завершить файлы в корневом каталоге, скрывая скрытые файлы по умолчанию.\nread(nil, nil, function(str)\n    return fs.complete(str, "", {\n        include_files = true,\n        include_dirs = false,\n        include_hidden = false,\n    })\nend)',
      },
      {
        name: "find",
        args: [{ arg_name: "path", required: true }],
        type: "function",
        description:
          'Поиск файлов, соответствующих строке с использованием подстановочных знаков.\nЭта строка выглядит как обычная строка пути, но может включать подстановочные знаки, которые\nмогут соответствовать нескольким путям:\n"?" соответствует любому одному символу в имени файла.\n"*" соответствует любому количеству символов.\nНапример, rom/*/command* будет искать любой путь, начинающийся с command\nв любом подкаталоге /rom.\nОбратите внимание, что эти подстановочные знаки соответствуют одному сегменту пути. Например,\nrom/*.lua включит rom/startup.lua, но не включит rom/programs/list.lua.\nПараметры\npath string Путь с подстановочными знаками для поиска.\nВозвращает\n{ string... } Список путей, соответствующих поисковому запросу.\nВызывает исключение\nЕсли предоставленный путь был недопустим.\nИспользование\nСписок всех файлов Markdown в папке help\nfs.find("rom/help/*.md")',
      },
      {
        name: "isDriveRoot",
        args: [{ arg_name: "path", required: true }],
        type: "function",
        description:
          'Возвращает true, если путь смонтирован к родительской файловой системе.\nКорневая файловая система "/" считается монтированной, наряду с папками дисков и\nпапкой rom. Другие программы (такие как сетевые ресурсы) могут расширять это,\nправильно устанавливая свое возвращаемое значение для getDrive.\nПараметры\npath string Путь для проверки.\nВозвращает\nboolean Если путь смонтирован, а не обычный файл/папка.\nВызывает исключение\nЕсли путь не существует.\nСмотрите также\ngetDrive',
      },
      {
        name: "list",
        args: [{ arg_name: "path", required: true }],
        type: "function",
        description:
          'Возвращает список файлов в директории.\nПараметры\npath string Путь к директории для листинга.\nВозвращаемое значение\n{ string... } Таблица со списком файлов в директории.\nИсключения\nЕсли путь не существует.\nПример использования\nСписок всех файлов в /rom/\nlocal files = fs.list("/rom/")\nfor i = 1, #files do\n  print(files[i])\nend',
      },
      {
        name: "combine",
        args: [
          { arg_name: "path", required: true },
          { arg_name: "...args", required: false },
        ],
        type: "function",
        description:
          'Объединяет несколько частей пути в один полный путь, добавляя разделители по мере необходимости.  \nПараметры  \npath string Первая часть пути. Например, путь к родительскому каталогу... string Дополнительные части пути для объединения.  \nВозвращает  \nstring Новый путь, с добавленными разделителями между частями по мере необходимости.  \nВызывает исключение  \nПри ошибках аргументов.  \nПример использования  \nОбъедините несколько файловых путей вместе  \nfs.combine("/rom/programs", "../apis", "parallel.lua")  \n-- => rom/apis/parallel.lua',
      },
      {
        name: "getName",
        args: [{ arg_name: "path", required: true }],
        type: "function",
        description:
          'Возвращает часть пути, соответствующую имени файла.\nПараметры\npath string Путь, из которого нужно получить имя.\nВозвращает\nstring Конечная часть пути (имя файла).\nИспользование\nПолучить имя файла из rom/startup.lua\nfs.getName("rom/startup.lua")\n-- => startup.lua',
      },
      {
        name: "getDir",
        args: [{ arg_name: "path", required: true }],
        type: "function",
        description:
          'Возвращает часть пути, содержащую родительский каталог.\nПараметры\npath string Путь, из которого получается каталог.\nВозвращаемое значение\nstring Путь с удалённой последней частью (родительский каталог).\nПример использования\nПолучить имя каталога для rom/startup.lua\nfs.getDir("rom/startup.lua")\n-- => rom',
      },
      {
        name: "getSize",
        args: [{ arg_name: "path", required: true }],
        type: "function",
        description:
          "Возвращает размер указанного файла.\nПараметры\npath string Файл, размер которого нужно получить.\nВозвращает\nnumber Размер файла в байтах.\nВыдает ошибку\nЕсли указанный путь не существует.",
      },
      {
        name: "exists",
        args: [{ arg_name: "path", required: true }],
        type: "function",
        description:
          "Возвращает информацию о том, существует ли указанный путь.\nПараметры\npath string Путь, наличие которого необходимо проверить.\nВозвращает\nboolean Существует ли путь.",
      },
      {
        name: "isDir",
        args: [{ arg_name: "path", required: true }],
        type: "function",
        description:
          "Возвращает, является ли указанный путь директорией.\nПараметры\npath string Путь для проверки.\nВозвращаемое значение\nboolean Является ли путь директорией.",
      },
      {
        name: "isReadOnly",
        args: [{ arg_name: "path", required: true }],
        type: "function",
        description:
          "Возвращает, является ли путь доступным только для чтения.\nПараметры\npath string Путь для проверки.\nВозвращает\nboolean Возвращает, невозможно ли записать в путь.",
      },
      {
        name: "makeDir",
        args: [{ arg_name: "path", required: true }],
        type: "function",
        description:
          "Создает каталог и все отсутствующие родительские каталоги по указанному пути. \nПараметры \npath string Путь к каталогу, который нужно создать. \nИсключения \nЕсли каталог не может быть создан.",
      },
      {
        name: "move",
        args: [
          { arg_name: "path", required: true },
          { arg_name: "dest", required: true },
        ],
        type: "function",
        description:
          "Перемещает файл или директорию из одного пути в другой.\nСоздаёт все необходимые родительские директории.\nПараметры\npath string Текущий файл или директория для перемещения.\ndest string Путь назначения для файла или директории.\nВыбрасывает исключение\nЕсли файл или директория не могут быть перемещены.",
      },
      {
        name: "copy",
        args: [
          { arg_name: "path", required: true },
          { arg_name: "dest", required: true },
        ],
        type: "function",
        description:
          "Копирует файл или директорию по новому пути. \nВ случае необходимости создаются все родительские каталоги. \nПараметры \npath string Файл или директория для копирования. dest string Путь к целевому файлу или директории. \nВызывает исключение \nЕсли файл или директория не могут быть скопированы.",
      },
      {
        name: "delete",
        args: [{ arg_name: "path", required: true }],
        type: "function",
        description:
          "Удаляет файл или каталог.\nЕсли путь указывает на каталог, все содержащиеся файлы и\nподкаталоги также удаляются.\nПараметры\npath string Путь к файлу или каталогу, который нужно удалить.\nИсключения\nЕсли файл или каталог не удалось удалить.",
      },
      {
        name: "open",
        args: [
          { arg_name: "path", required: true },
          { arg_name: "mode", required: true },
        ],
        type: "function",
        description:
          'Открывает файл для чтения или записи по указанному пути.\nСтрока режима может быть одной из следующих:\n"r": Режим чтения\n"w": Режим записи\n"a": Режим добавления \n"r+": Режим обновления (позволяет читать и писать), все данные сохраняются\n"w+": Режим обновления, все данные стираются.\nРежим также может иметь в конце "b", что открывает файл в "бинарном\nрежиме". Это изменяет fs.ReadHandle.read и fs.WriteHandle.write\nна чтение/запись отдельных байт в виде чисел, а не строк.\nПараметры\npath string Путь к файлу для открытия.mode string Режим для открытия файла.\nВозвращает\ntable Объект дескриптора файла для файла.\nИли\nnil Если файл не существует или не может быть открыт.string | nil Сообщение, объясняющее, почему файл не может быть открыт.\nВыбрасывает\nЕсли указан неверный режим.\nПример использования\nПрочтите содержимое файла.\nlocal file = fs.open("/rom/help/intro.txt", "r")\nlocal contents = file.readAll()\nfile.close()\nprint(contents)\nОткройте файл и прочтите все строки в таблицу. io.lines предлагает альтернативный способ сделать это.\nlocal file = fs.open("/rom/motd.txt", "r")\nlocal lines = {}\nwhile true do\n  local line = file.readLine()\n  -- Если line равен nil, то мы достигли конца файла и должны остановиться\n  if not line then break end\n  lines[#lines + 1] = line\nend\nfile.close()\nprint(lines[math.random(#lines)]) -- Выберите случайную строку и напечатайте её.\nОткройте файл и напишите в него некоторый текст. Вы можете выполнить edit out.txt, чтобы увидеть написанный текст.\nlocal file = fs.open("out.txt", "w")\nfile.write("Просто тестирую некоторый код")\nfile.close() -- Не забудьте вызвать close, иначе изменения могут не быть записаны!',
      },
      {
        name: "getDrive",
        args: [{ arg_name: "path", required: true }],
        type: "function",
        description:
          'Возвращает имя диска, на котором находится указанный путь.\nПараметры\npath string - Путь для получения диска.\nВозвращает\nstring | nil - Имя диска, на котором находится файл; например, hdd для локальных файлов или rom для файлов ROM.\nВыбрасывает исключение\nЕсли путь не существует.\nИспользование\nВывести диски нескольких монтажных устройств:\nprint("/: " .. fs.getDrive("/"))\nprint("/rom/: " .. fs.getDrive("rom"))',
      },
      {
        name: "getFreeSpace",
        args: [{ arg_name: "path", required: true }],
        type: "function",
        description:
          'Возвращает количество свободного места, доступного на диске, на котором находится указанный путь.\nПараметры\npath string Путь для проверки доступного свободного места.\nВозвращает\nnumber | "unlimited" Количество доступного свободного места, в байтах, или "unlimited".\nВыбрасывает исключение\nЕсли путь не существует.\nСмотрите также\ngetCapacity Для получения емкости этого диска.',
      },
      {
        name: "getCapacity",
        args: [{ arg_name: "path", required: true }],
        type: "function",
        description:
          'Возвращает объем диска, на котором расположен указанный путь.\nПараметры\npath string - Путь к диску, информацию о котором нужно получить.\nВозвращает\nnumber | nil - Объем диска. Будет nil для "только для чтения" дисков, таких как ROM или\nдиски с сокровищами.\nВыбрасывает\nЕсли объем не может быть определен.\nСмотрите также\ngetFreeSpace - Чтобы получить информацию о свободном пространстве на этом диске.',
      },
      {
        name: "attributes",
        args: [{ arg_name: "path", required: true }],
        type: "function",
        description:
          "Получите атрибуты конкретного файла или папки.  \nВозвращаемая таблица атрибутов содержит информацию о размере файла, является ли он директорией,  \nкогда он был создан и последний раз изменен, а также о том, доступен ли он только для чтения.  \nВремя создания и изменения указывается в виде количества миллисекунд с момента UNIX эпохи. Это может быть  \nиспользовано с os.date для преобразования в более удобную форму.  \nПараметры  \npath string Путь, для которого нужно получить атрибуты.  \nВозвращает  \n{ size = number, isDir = boolean, isReadOnly = boolean, created = number, modified = number } Результирующие атрибуты.  \nВыдает исключение  \nЕсли указанный путь не существует.  \nСм. также  \ngetSize Если вам важен только размер файла.  \nisDir Если вам важно знать, является ли путь директорией или нет.",
      },
    ],
  },
  {
    name: "redstone",
    help_url: "https://tweaked.cc/module/redstone.html#v:",
    list_docs: [
      {
        name: "getSides",
        args: [{ arg_name: "", required: true }],
        type: "function",
        description:
          'Возвращает таблицу, содержащую шесть сторон компьютера, а именно: "верх", "низ", "лево", "право", "перед" и "зад".\nВозвращаемое значение:\n{ строка... } Таблица допустимых сторон.',
      },
      {
        name: "setOutput",
        args: [
          { arg_name: "side", required: true },
          { arg_name: "on", required: true },
        ],
        type: "function",
        description:
          "Включение или выключение редстоун-сигнала на определенной стороне.\nПараметры\nside string Сторона, для которой нужно установить сигнал.\non boolean Определяет, должен ли быть включен редстоун-сигнал. При включении излучается сигнал силой 15.",
      },
      {
        name: "getOutput",
        args: [{ arg_name: "side", required: true }],
        type: "function",
        description:
          "Получить текущий выходной сигнал редстоуна с определенной стороны. \nПараметры \nside string Сторона для получения. \nВозвращает \nboolean Включен ли выходной сигнал редстоуна или выключен. \nСмотрите также \nsetOutput",
      },
      {
        name: "getInput",
        args: [{ arg_name: "side", required: true }],
        type: "function",
        description:
          "Получить текущий входной сигнал редстоуна с определенной стороны.\nПараметры\nside string Сторона для получения.\nВозвращает\nboolean Включен ли входной сигнал редстоуна или выключен.",
      },
      {
        name: "setAnalogOutput",
        args: [
          { arg_name: "side", required: true },
          { arg_name: "value", required: true },
        ],
        type: "function",
        description:
          "Установить уровень сигнала редстоуна для определенной стороны.\nПараметры\nside string Сторона для установки.\nvalue number Сила сигнала между 0 и 15.\nВыбрасывает исключение\nЕсли значение не находится в промежутке между 0 и 15.",
      },
      {
        name: "setAnalogueOutput",
        args: [
          { arg_name: "side", required: true },
          { arg_name: "value", required: true },
        ],
        type: "function",
        description:
          "Установите уровень сигнала редстоуна для указанной стороны.\nПараметры\nside string Сторона для установки.\nvalue number Сила сигнала от 0 до 15.\nИсключения\nЕсли значение не находится в диапазоне от 0 до 15.",
      },
      {
        name: "getAnalogOutput",
        args: [{ arg_name: "side", required: true }],
        type: "function",
        description:
          "Получить силу сигнала выхода редстоуна для определенной стороны.\nПараметры\nside string Сторона для получения.\nВозвращает\nnumber Сила сигнала на выходе, от 0 до 15.\nСмотрите также\nsetAnalogOutput",
      },
      {
        name: "getAnalogueOutput",
        args: [{ arg_name: "side", required: true }],
        type: "function",
        description:
          "Получите силу сигнала выхода редстоуна для определенной стороны.\nПараметры\nside string Сторона для получения.\nВозвращает\nnumber Сила сигнала на выходе, между 0 и 15.\nСмотрите также\nsetAnalogOutput",
      },
      {
        name: "getAnalogInput",
        args: [{ arg_name: "side", required: true }],
        type: "function",
        description:
          "Получить силу сигнала входа красного камня для конкретной стороны.\nПараметры\nside string Сторона для получения.\nВозвращает\nnumber Сила входного сигнала, от 0 до 15.",
      },
      {
        name: "getAnalogueInput",
        args: [{ arg_name: "side", required: true }],
        type: "function",
        description:
          "Получить силу входного сигнала редстоуна для определенной стороны.\nПараметры\nside string Сторона для получения.\nВозвращает\nnumber Силу входного сигнала, от 0 до 15.",
      },
      {
        name: "setBundledOutput",
        args: [
          { arg_name: "side", required: true },
          { arg_name: "output", required: true },
        ],
        type: "function",
        description:
          "Установите выходное значение для кабеля с групповыми входами для определенной стороны.  \nПараметры  \nside string Сторона для установки.  \noutput number Битовая маска цвета для установки.  \nСмотрите также  \ncolors.subtract Для удаления цвета из битовой маски.  \ncolors.combine Для добавления цвета в битовую маску.  ",
      },
      {
        name: "getBundledOutput",
        args: [{ arg_name: "side", required: true }],
        type: "function",
        description:
          "Получите выход сгруппированного кабеля для определенной стороны.\nПараметры\nside string Сторона для получения.\nВозвращает\nnumber Выход сгруппированного кабеля.",
      },
      {
        name: "getBundledInput",
        args: [{ arg_name: "side", required: true }],
        type: "function",
        description:
          "Получить вход сгруппированного кабеля для определённой стороны.\nПараметры\nside string Сторона, которую нужно получить.\nВозвращает\nnumber Вход сгруппированного кабеля.\nСмотрите также\ntestBundledInput Чтобы определить, установлен ли определённый цвет.",
      },
      {
        name: "testBundledInput",
        args: [
          { arg_name: "side", required: true },
          { arg_name: "mask", required: true },
        ],
        type: "function",
        description:
          'Определите, активирована ли конкретная комбинация цветов на заданной стороне.\nПараметры:\nside string - Сторона для проверки.\nmask number - Маска для проверки.\nВозвращает:\nboolean - Возвращает true, если указанные цвета активированы.\nПрименение:\nПроверьте, включены ли цвета colors.white и colors.black сверху от компьютера.\nprint(redstone.testBundledInput("top", colors.combine(colors.white, colors.black)))\nСмотрите также:\ngetBundledInput',
      },
    ],
  },
];

for (let section of sections) {
  let section_help_url = section["help_url"];
  let section_key = section["name"];
  let list_items = section["list_docs"];

  for (let list_item of list_items) {
    let key = `${section_key}_${list_item["name"]}`;

    Blockly.Blocks[key] = {
      init: function () {
        let title = `${section_key} ${list_item["name"]}`.replace("/", ".");
        if (section_key === "_G") {
          title = list_item["name"];
        }

        if (section_help_url !== null) {
          this.setHelpUrl(section_help_url + list_item["name"]);
        }

        this.appendDummyInput().appendField(title);

        if (list_item["type"] === "function") {
          for (let arg of list_item["args"]) {
            if (arg["arg_name"] === "") continue;

            this.appendValueInput(arg["arg_name"]).appendField(
              `${arg["arg_name"]}: `
            );
          }
        }

        if (list_item["type"] === "function") {
          this.setPreviousStatement(true, null);
          this.setNextStatement(true, null);
        }

        this.setOutput(true, null);

        this.setColour(230);
        this.setTooltip(list_item["description"]);
      },
    };
    luaGenerator.forBlock[key] = function (block, generator) {
      console.log();

      if (list_item["type"] === "function") {
        let argsList = [];

        for (let arg of list_item["args"]) {
          if (arg["arg_name"] === "") continue;

          argsList.push(
            generator.valueToCode(block, arg["arg_name"], Order.ATOMIC)
          );
        }

        const argsString = argsList.join(",");

        let func_name = `${section_key}.${list_item["name"]}`;
        if (section_key === "_G") {
          func_name = list_item["name"];
        }

        if (block.outputConnection.targetConnection) {
          return [`${func_name}(${argsString})\n`, Order.NONE];
        } else {
          return `${func_name}(${argsString})\n`;
        }
      } else {
        return `${section_key}.${list_item["name"]}`;
      }
    };
  }
}
